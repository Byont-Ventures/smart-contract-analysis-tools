#========================================
# base-ubuntu
#========================================

ARG UBUNTU_VERSION=focal
FROM ubuntu:${UBUNTU_VERSION} AS base-ubuntu

ARG LLVM_VERSION=12

# Install dependencies
# https://github.com/runtimeverification/evm-semantics/tree/v1.0.1-0e96c8d#ubuntu
RUN export DEBIAN_FRONTEND=noninteractive \
    && apt update \
    && apt upgrade -y \
	&& apt install -y \
		autoconf \
		bison \
		clang-${LLVM_VERSION} \
		cmake \
		curl \
		flex \
		gcc \
		jq \
		libboost-test-dev \
		libcrypto++-dev \
		libffi-dev \
		libgflags-dev \
		libjemalloc-dev \
		libmpfr-dev \
		libprocps-dev \
		libsecp256k1-dev \
		libssl-dev \
		libtool \
		libyaml-dev \
		lld-${LLVM_VERSION} \
		llvm-${LLVM_VERSION}-tools \
		make \
		maven \
		netcat-openbsd \
		openjdk-11-jdk \
		pkg-config \
		protobuf-compiler \
		python3 \
		python-pygments \
		rapidjson-dev \
		time \
		zlib1g-dev

# Non-duplicates from k repo readme
# https://github.com/runtimeverification/k/blob/master/package/debian/Dockerfile
RUN export DEBIAN_FRONTEND=noninteractive \
    && apt update                \
    && apt upgrade -y            \
    && apt install -y            \
        build-essential          \
        debhelper                \
        gcc                      \
        libgdbm-dev              \
        libgmp-dev               \
        libffi-dev               \
        libmpfr-dev              \
        libncurses5-dev          \
        libnss3-dev              \
        libreadline-dev          \
        libsqlite3-dev           \
        libbz2-dev               \
        libz3-dev                \
        parallel                 \
        pkg-config               \
        python3-dev              \
        python3-distutils        \
        python3-pip              

# Needed for add-apt-repository
RUN apt install -y \
        apt-utils \
	    software-properties-common

# Install git
RUN add-apt-repository -y ppa:git-core/ppa \
	&& apt update \
    && apt upgrade -y \
	&& apt install -y git

#========================================
# base-ubuntu-tooling
#========================================

FROM base-ubuntu AS base-ubuntu-tooling

# Install Haskell
RUN curl -sSL https://get.haskellstack.org/ | sh
ENV PATH=/root/.local/bin:$PATH

# Intall Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH=/root/.cargo/bin:$PATH

#========================================
# base-ubuntu-tooling-z3
#========================================

FROM base-ubuntu-tooling AS base-ubuntu-tooling-z3

# Install z3
# Version $Z3_VERSION required by kevm v${KEVM_VERSION}-${KEVM_COMMIT}
# https://github.com/runtimeverification/evm-semantics/releases/tag/v$KEVM_VERSION
ARG Z3_VERSION=4.8.15

RUN git clone https://github.com/Z3Prover/z3.git \
	&& cd z3 \
	&& git checkout z3-${Z3_VERSION} \
	&& python3 scripts/mk_make.py \
	&& cd build \
	&& make -j8 \
	&& make -j8 install \
    && cd ../../ \
    && find ./z3 -mindepth 1 ! -regex '^./z3/build\(/.*\)?' -delete

# For mythril that uses the z3 python module
ENV PYTHONPATH=/z3/build/python:$PYTHONPATH
ENV LD_LIBRARY_PATH=/z3/build:$LD_LIBRARY_PATH

# Needed for solc SMTChecker to find it
RUN export Z3_VERSION_MAIN=$(echo ${Z3_VERSION} | cut -d'.' -f1)            \
    && export Z3_VERSION_MIDDLE=$(echo ${Z3_VERSION} | cut -d'.' -f2)       \
    && cp /z3/build/libz3.so /lib/libz3.so.${Z3_VERSION_MAIN}.${Z3_VERSION_MIDDLE}

#========================================
# base-ubuntu-tooling-z3-solc
#========================================

FROM base-ubuntu-tooling-z3 AS base-ubuntu-tooling-z3-solc

RUN DEBIAN_FRONTEND=noninteractive apt install -y libboost-all-dev

# https://github.com/crytic/solc-select/issues/132 normal solc-select not ready yet for ARM
# https://github.com/roynalnaruto/svm-rs this is also what foundry uses and provided solc for aarch64 (arm)
# Unfortunately the binaries that svm uses for aarch64 don't make use of the flag `USE_Z3_DLOPEN`. An issue has been created: https://github.com/nikitastupin/solc/issues/6

# I get the same error as here: https://github.com/ethereum/solidity/issues/13178
ARG SOLC_VERSION=0.8.17
RUN git clone --recursive https://github.com/ethereum/solidity.git \
	&& cd solidity \
	&& git checkout v${SOLC_VERSION} \
    && mkdir ./build \
    && cd ./build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release -DSTRICT_Z3_VERSION=OFF -DUSE_Z3_DLOPEN=ON \
    && make -j4

#========================================
# base-ubuntu-tooling-z3-kevm
#========================================

FROM base-ubuntu-tooling-z3 AS base-ubuntu-tooling-z3-kevm

# Get the evm-semantics repo
ARG KEVM_VERSION=1.0.1
ARG KEVM_COMMIT=0e96c8d

RUN git clone https://github.com/runtimeverification/evm-semantics.git /root/evm-semantics \
	&& cd /root/evm-semantics \
	&& git checkout v${KEVM_VERSION}-${KEVM_COMMIT}

WORKDIR /root/evm-semantics

# Install dependencies with poetry
RUN pip3 install virtualenv poetry   \
    && cd /root/evm-semantics/kevm-pyk  \
	&& make poetry-install
ENV PYTHONPATH=/root/.cache/pypoetry/virtualenvs/kevm-pyk-wYudXE09-py3.8/lib/python3.8/site-packages:$PYTHONPATH
ENV PYTHONPATH=/root/evm-semantics/kevm-pyk/src:$PYTHONPATH

# K Framework
# Comment out the lines described in this issue https://github.com/runtimeverification/k/issues/2910
#   in deps/k/kernel/src/main/java/org/kframework/parser/ParserUtils.java
#   lines 227 and 228
# For arm64 some extra things needed to be set for building the k-framework. See:
#   https://stackoverflow.com/questions/63746826/what-might-cause-commitandreleasebuffer-invalid-argument-invalid-character
RUN git submodule update --init --recursive
RUN sed -i '227s/^/\/\/ /' deps/k/kernel/src/main/java/org/kframework/parser/ParserUtils.java \
    && sed -i '228s/^/\/\/ /' deps/k/kernel/src/main/java/org/kframework/parser/ParserUtils.java

RUN mkdir -p .build/usr/bin \
    && mkdir -p .build/usr/lib/kevm
ENV PATH=/root/evm-semantics/.build/usr/bin:$PATH
ENV PATH=/root/evm-semantics/.build/usr/lib/kevm/kframework/bin:$PATH

# https://github.com/runtimeverification/evm-semantics/issues/1022
# https://github.com/runtimeverification/evm-semantics#macos
RUN if [ "$(uname -m)" = "aarch64" ]; then                                  \
        DEBIAN_FRONTEND=noninteractive apt install -y libnuma-dev           \
        && LANG=C.UTF-8 make deps RELEASE=true APPLE_SILICON=true           \
        && LANG=C.UTF-8 make libsecp256k1                                   \
        && LANG=C.UTF-8 make plugin-deps RELEASE=true APPLE_SILICON=true    \
        && LANG=C.UTF-8 make build RELEASE=true APPLE_SILICON=true;         \
    else                                                                    \
        make deps RELEASE=true                                              \
        && make plugin-deps RELEASE=true                                    \
        && make build RELEASE=true;                                         \
    fi

ENV PATH=/root/evm-semantics/deps/k/k-distribution/bin:$PATH

WORKDIR /

#========================================
# final-image
#========================================

FROM base-ubuntu-tooling-z3-kevm AS final-image

## For pyo when installing Mythril
RUN rustup default nightly

# Install Mythril
## We will use our own build z3 module
ARG MYTHRIL_VERSION=0.23.12
RUN git clone https://github.com/ConsenSys/mythril.git  \
    && cd mythril                                       \
    && git checkout v${MYTHRIL_VERSION}                 \
    && sed -i '/z3-solver/d' ./requirements.txt         \
    && pip3 install maturin                             \
    && pip3 install -r requirements.txt                 \
    && python3 setup.py install

ENV PATH=/mythril:$PATH

# Install Slither
ARG SLITHER_VERSION=0.9.0
RUN pip3 install slither-analyzer==${SLITHER_VERSION}

# Install foundry
RUN curl -L https://foundry.paradigm.xyz | bash
ENV PATH=/root/.foundry/bin:$PATH
RUN foundryup

# Get solc files
COPY --from=base-ubuntu-tooling-z3-solc /usr/local/bin/solc /usr/local/bin/solc

# Make sure that solc can be found
RUN solc --version

RUN pip3 install --upgrade requests

RUN apt autoremove --purge  \
    && apt autoclean        \
    && apt clean
