

#========================================
# base-ubuntu
#========================================

ARG UBUNTU_VERSION=focal
FROM ubuntu:${UBUNTU_VERSION} AS base-ubuntu

SHELL ["/bin/bash", "-c"]

ARG LLVM_VERSION=12

# Needed for add-apt-repository
RUN export DEBIAN_FRONTEND=noninteractive   \  
    && apt update  \
    && apt upgrade -y   \
    && apt install -y \
        build-essential  \
	    software-properties-common \
        apt-utils

# Install dependencies
# https://github.com/runtimeverification/evm-semantics/tree/v1.0.1-0e96c8d#ubuntu
RUN export DEBIAN_FRONTEND=noninteractive   \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt update                           \
    && apt upgrade -y                       \
	&& apt install -y                       \
		autoconf                            \
		bison                               \
		clang-${LLVM_VERSION}               \
		cmake                               \
		curl                                \
		flex                                \
		gcc                                 \
		jq                                  \
		libboost-test-dev                   \
		libcrypto++-dev                     \
		libffi-dev                          \
		libgflags-dev                       \
		libjemalloc-dev                     \
		libmpfr-dev                         \
		libprocps-dev                       \
		libsecp256k1-dev                    \
		libssl-dev                          \
		libtool                             \
		libyaml-dev                         \
		lld-${LLVM_VERSION}                 \
		llvm-${LLVM_VERSION}-tools          \
		make                                \
		maven                               \
		netcat-openbsd                      \
		openjdk-11-jdk                      \
		pkg-config                          \
		protobuf-compiler                   \
		python3.10                             \
		python-pygments                     \
		rapidjson-dev                       \
		time                                \
		zlib1g-dev

# Non-duplicates from k repo readme
# https://github.com/runtimeverification/k/blob/master/package/debian/Dockerfile
RUN export DEBIAN_FRONTEND=noninteractive \
    && apt update                \
    && apt upgrade -y            \
    && apt install -y            \
        debhelper                \
        gcc                      \
        libgdbm-dev              \
        libgmp-dev               \
        libffi-dev               \
        libmpfr-dev              \
        libncurses5-dev          \
        libnss3-dev              \
        libreadline-dev          \
        libsqlite3-dev           \
        libbz2-dev               \
        libz3-dev                \
        parallel                 \
        pkg-config               \
        python3.10-dev           \
        python3.10-distutils

RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10             

# Install git
RUN add-apt-repository -y ppa:git-core/ppa \
	&& apt update \
    && apt upgrade -y \
	&& apt install -y git

#========================================
# base-ubuntu-tooling
#========================================

FROM base-ubuntu AS base-ubuntu-tooling

RUN apt install -y sudo

ENV USER_ID=1000
ENV GROUP_ID=1000
RUN groupadd --gid $GROUP_ID user   \
    && useradd --create-home --uid $USER_ID --shell /bin/sh --gid user user \
    && passwd -d user \
    && usermod -aG sudo user

USER $USER_ID:$GROUP_ID
WORKDIR /home/user
ENV USER=user

# Install Haskell
# RUN curl -sSL https://get.haskellstack.org/ | sh
# ENV PATH=/home/user/.local/bin:$PATH

# Intall Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH=/home/user/.cargo/bin:$PATH

#========================================
# base-ubuntu-tooling-z3
#========================================

FROM base-ubuntu-tooling AS base-ubuntu-tooling-z3

# Install z3
# Version $Z3_VERSION required by Solidity
ARG Z3_VERSION=4.8.16

RUN git clone https://github.com/Z3Prover/z3.git    \
	&& cd z3                                        \
	&& git checkout z3-${Z3_VERSION}                \
	&& python3 scripts/mk_make.py                   \
	&& cd build                                     \
	&& make -j8                                     \
	&& sudo make -j8 install                        \
    && cd ../../                                    \
    && find ./z3 -mindepth 1 ! -regex '^./z3/build\(/.*\)?' -delete

# For mythril that uses the z3 python module
ENV PYTHONPATH=/home/user/z3/build/python:$PYTHONPATH
ENV LD_LIBRARY_PATH=/home/user/z3/build:$LD_LIBRARY_PATH

# Needed for solc SMTChecker to find it
RUN export Z3_VERSION_MAIN=$(echo ${Z3_VERSION} | cut -d'.' -f1)        \
    && export Z3_VERSION_MIDDLE=$(echo ${Z3_VERSION} | cut -d'.' -f2)   \
    && sudo cp /home/user/z3/build/libz3.so /lib/libz3.so.${Z3_VERSION_MAIN}.${Z3_VERSION_MIDDLE}

#========================================
# base-ubuntu-tooling-z3-solc
#========================================

FROM base-ubuntu-tooling-z3 AS base-ubuntu-tooling-z3-solc

RUN DEBIAN_FRONTEND=noninteractive sudo apt install -y libboost-all-dev

# https://github.com/crytic/solc-select/issues/132 normal solc-select not ready yet for ARM
# https://github.com/roynalnaruto/svm-rs this is also what foundry uses and provided solc for aarch64 (arm)
# Unfortunately the binaries that svm uses for aarch64 don't make use of the flag `USE_Z3_DLOPEN`. An issue has been created: https://github.com/nikitastupin/solc/issues/6
# solc only support z3 >= 4.8.16 https://github.com/ethereum/solidity/issues/13178

# CMAKE_INSTALL_BINDIR doesn't seems to be set, event though CMakeLists.txt in solidity/solc uses `include(GNUInstallDirs)`

ARG SOLC_VERSION=0.8.17
RUN git clone --recursive https://github.com/ethereum/solidity.git                      \
    && cd ./solidity                                                                    \
    && git checkout v${SOLC_VERSION}                                                    \
    && touch ./prerelease.txt                                                           \
    && mkdir ./build                                                                    \
    && cd ./build                                                                       \
    && cmake .. -DCMAKE_BUILD_TYPE=Release -DSTRICT_Z3_VERSION=OFF -DUSE_Z3_DLOPEN=ON   \
    && make -j4                                                                         \
    && cd ../../                                                                        \
    && find ./solidity -mindepth 1 ! -regex '^./solidity/build\(/.*\)?' -delete

ENV PATH=/home/user/solidity/build/solc:$PATH

#========================================
# base-ubuntu-tooling-z3-solc-kevm
#========================================

FROM base-ubuntu-tooling-z3-solc AS base-ubuntu-tooling-z3-solc-kevm

RUN sudo mkdir -m 0755 /nix && sudo chown user /nix

# Get the evm-semantics repo
# ARG KEVM_VERSION=1.0.1
# ARG KEVM_COMMIT=6b2b9aa

RUN source .profile && source .bashrc \
    && bash <(curl -L https://nixos.org/nix/install)
RUN source .profile && source .bashrc \
    && bash <(curl https://kframework.org/install)
RUN source .profile && source .bashrc \
    && sudo mkdir -p /etc/nix && sudo touch /etc/nix/nix.conf \
    && echo "trusted-users = root user" | sudo tee -a /etc/nix/nix.conf
RUN source .profile && source .bashrc \
    && kup install kevm

# RUN git clone https://github.com/runtimeverification/evm-semantics.git /root/evm-semantics  \
# 	&& cd /root/evm-semantics                                                               \
# 	&& git checkout ${KEVM_COMMIT}

# WORKDIR /root/evm-semantics

# # Install dependencies with poetry
#  RUN pip3 install virtualenv poetry \
#     && cd /root/evm-semantics/kevm-pyk  \
#  	&& make poetry-install
# ENV PYTHONPATH=/root/.cache/pypoetry/virtualenvs/kevm-pyk-wYudXE09-py3.10/lib/python3.10/site-packages:$PYTHONPATH
# ENV PYTHONPATH=/root/evm-semantics/kevm-pyk/src:$PYTHONPATH

# # K Framework
# # Comment out the lines described in this issue https://github.com/runtimeverification/k/issues/2910
# #   in deps/k/kernel/src/main/java/org/kframework/parser/ParserUtils.java
# #   lines 227 and 228
# RUN git submodule update --init --recursive
# RUN sed -i '237s/^/\/\/ /' deps/k/kernel/src/main/java/org/kframework/parser/ParserUtils.java \
#     && sed -i '238s/^/\/\/ /' deps/k/kernel/src/main/java/org/kframework/parser/ParserUtils.java

# RUN mkdir -p .build/usr/bin \
#     && mkdir -p .build/usr/lib/kevm
# ENV PATH=/root/evm-semantics/.build/usr/bin:$PATH
# ENV PATH=/root/evm-semantics/.build/usr/lib/kevm/kframework/bin:$PATH

# # For arm64 some extra things needed to be set for building the k-framework. See:
# #   https://stackoverflow.com/questions/63746826/what-might-cause-commitandreleasebuffer-invalid-argument-invalid-character
# # https://github.com/runtimeverification/evm-semantics/issues/1022
# # https://github.com/runtimeverification/evm-semantics#macos
# # RUN stack install ghc-bignum
# # RUN if [ "$(uname -m)" = "aarch64" ]; then                                  \
# #         DEBIAN_FRONTEND=noninteractive apt install -y libnuma-dev           \
# #         && LANG=C.UTF-8 make deps RELEASE=true APPLE_SILICON=true           \
# #         && LANG=C.UTF-8 make libsecp256k1                                   \
# #         && LANG=C.UTF-8 make plugin-deps RELEASE=true APPLE_SILICON=true    \
# #         && LANG=C.UTF-8 make build RELEASE=true APPLE_SILICON=true;         \
# #     else                                                                    \
# #         make deps RELEASE=true                                              \
# #         && make plugin-deps RELEASE=true                                    \
# #         && make build RELEASE=true;                                         \
# #     fi

# RUN stack upgrade
# RUN if [ "$(uname -m)" = "aarch64" ]; then DEBIAN_FRONTEND=noninteractive apt install -y libnuma-dev; fi
# RUN if [ "$(uname -m)" = "aarch64" ]; then stack install ghc-bignum; fi
# RUN if [ "$(uname -m)" = "aarch64" ]; then LANG=C.UTF-8 make deps RELEASE=true APPLE_SILICON=true; fi
# # RUN if [ "$(uname -m)" = "aarch64" ]; then LANG=C.UTF-8 make libsecp256k1; fi
# # RUN if [ "$(uname -m)" = "aarch64" ]; then LANG=C.UTF-8 make plugin-deps RELEASE=true APPLE_SILICON=true; fi
# # RUN if [ "$(uname -m)" = "aarch64" ]; then LANG=C.UTF-8 make build RELEASE=true APPLE_SILICON=true; fi
# # RUN if [ "$(uname -m)" != "aarch64" ]; then     \
# #     make deps RELEASE=true                      \
# #         && make plugin-deps RELEASE=true        \
# #         && make build RELEASE=true;             \
# #     fi

# # ENV PATH=/root/evm-semantics/deps/k/k-distribution/bin:$PATH

# # WORKDIR /

#========================================
# final-image
#========================================

FROM base-ubuntu-tooling-z3-solc-kevm AS final-image

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH=/home/${userName}/.cargo/bin:$PATH

## For pyo when installing Mythril
RUN rustup default nightly

# Install Mythril
## We will use our own build z3 module
ARG MYTHRIL_VERSION=0.23.15
RUN git clone https://github.com/ConsenSys/mythril.git  \
    && cd mythril                                       \
    && git checkout v${MYTHRIL_VERSION}                 \
    && sed -i '/z3-solver/d' ./requirements.txt         \
    && pip3 install maturin                             \
    && pip3 install -r requirements.txt                 \
    && python3 setup.py install

ENV PATH=/mythril:$PATH

# Install Slither
ARG SLITHER_VERSION=0.9.2
RUN pip3 install slither-analyzer==${SLITHER_VERSION}

# Install foundry
RUN curl -L https://foundry.paradigm.xyz | bash
ENV PATH=/root/.foundry/bin:$PATH
RUN foundryup

RUN pip3 install --upgrade requests

RUN apt autoremove --purge  \
    && apt autoclean        \
    && apt clean
